# Generated by Django 2.2.6 on 2019-10-22 15:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='gitCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7418db23-f49b-11e9-8fd2-24f6770d0683'), max_length=64, unique=True)),
                ('codePath', models.CharField(help_text='存放路径如/data/code', max_length=64, verbose_name='本地存放路径')),
                ('codeserver', models.CharField(help_text='线上发布代码仓库或aws发布仓库', max_length=64, verbose_name='发布代码服务器')),
                ('codeFqdn', models.CharField(max_length=64, verbose_name='salt主机名')),
            ],
            options={
                'verbose_name': 'git仓库',
                'verbose_name_plural': 'git仓库',
                'db_table': 'gitCode',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7417548a-f49b-11e9-a2dc-24f6770d0683'), max_length=64, unique=True)),
                ('node_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='主机名')),
                ('eth1', models.GenericIPAddressField(blank=True, null=True, verbose_name='网卡1')),
                ('eth2', models.GenericIPAddressField(blank=True, null=True, verbose_name='网卡2')),
                ('mac', models.CharField(blank=True, max_length=20, null=True, verbose_name='MAC')),
                ('internal_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='远控卡')),
                ('brand', models.CharField(blank=True, choices=[('Dell R210', 'Dell R210'), ('Dell R410', 'Dell R410'), ('Dell R420', 'Dell R420'), ('Dell R510', 'Dell R510'), ('Dell R620', 'Dell R620'), ('Dell R710', 'Dell R710'), ('Dell R720', 'Dell R720'), ('Dell R720xd', 'Dell R720xd'), ('Dell R730xd', 'Dell R730xd'), ('HP', 'HP'), ('HP DL360p', 'HP DL360p'), ('HP DL380e', 'HP DL380e'), ('HP DL160', 'HP DL160'), ('Lenovo', 'Lenovo'), ('Lenovo WQ R510 G7', 'Lenovo WQ R510 G7'), ('Lenovo ThinkServer RD330', 'Lenovo ThinkServer RD330'), ('Lenovo ThinkServer RD340', 'Lenovo ThinkServer RD340'), ('DIY', 'DIY'), ('VIP', 'VIP'), ('虚拟化', '虚拟化'), ('Other', 'Other'), ('MediaServer', 'MediaServer'), ('网络设备', '网络设备')], max_length=64, null=True, verbose_name='硬件厂商')),
                ('cpu', models.CharField(blank=True, max_length=64, null=True, verbose_name='CPU')),
                ('hard_disk', models.CharField(blank=True, max_length=128, null=True, verbose_name='硬盘')),
                ('memory', models.CharField(blank=True, max_length=128, null=True, verbose_name='内存')),
                ('system', models.CharField(blank=True, choices=[('CentOS', 'CentOS'), ('Windows', 'Windows')], default='CentOS', max_length=32, null=True, verbose_name='系统类型')),
                ('system_cpuarch', models.CharField(blank=True, choices=[('x86_64', 'x86_64')], max_length=32, null=True, verbose_name='系统版本')),
                ('system_version', models.CharField(blank=True, max_length=8, null=True, verbose_name='版本号')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('guarantee_date', models.DateField(blank=True, null=True, verbose_name='保修时间')),
                ('cabinet', models.CharField(blank=True, max_length=32, null=True, verbose_name='机柜号')),
                ('server_cabinet_id', models.IntegerField(blank=True, null=True, verbose_name='机器位置')),
                ('number', models.CharField(blank=True, max_length=32, null=True, verbose_name='资产编号')),
                ('editor', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('status', models.IntegerField(blank=True, choices=[(0, '未安装系统'), (1, '已安装系统'), (2, '正在安装系统'), (3, '报废')], default=0, verbose_name='机器状态')),
                ('type', models.IntegerField(blank=True, default=1, max_length=2, verbose_name='主机类型')),
                ('Services_Code', models.CharField(blank=True, max_length=16, null=True, verbose_name='快速服务编码')),
                ('env', models.CharField(blank=True, choices=[('st', 'st'), ('aws', 'aws'), ('prod', 'prod'), ('pub', 'pub')], max_length=32, null=True, verbose_name='环境')),
                ('room_number', models.CharField(blank=True, choices=[('3-2', '3-2')], max_length=32, null=True, verbose_name='房间号')),
                ('server_sn', models.CharField(blank=True, max_length=32, null=True, verbose_name='SN编号')),
                ('switch_port', models.CharField(blank=True, max_length=12, null=True, verbose_name='端口号')),
                ('idle', models.BooleanField(choices=[(True, '使用中'), (False, '空闲')], default=1, verbose_name='状态')),
            ],
            options={
                'verbose_name': '服务器',
                'verbose_name_plural': '服务器',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7417069e-f49b-11e9-a1bc-24f6770d0683'), max_length=64, unique=True)),
                ('name', models.CharField(max_length=64, verbose_name='机房名称')),
                ('bandwidth', models.CharField(blank=True, max_length=64, null=True, verbose_name='机房带宽')),
                ('phone', models.CharField(max_length=32, verbose_name='联系电话')),
                ('linkman', models.CharField(max_length=32, null=True, verbose_name='联系人')),
                ('address', models.CharField(blank=True, max_length=128, null=True, verbose_name='机房地址')),
                ('network', models.TextField(blank=True, null=True, verbose_name='IP地址段')),
                ('create_time', models.DateField(auto_now=True)),
                ('operator', models.IntegerField(blank=True, choices=[(0, '电信'), (1, '联通'), (2, '移动'), (3, '铁通'), (4, '小带宽')], max_length=32, null=True, verbose_name='运营商')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'CDN'), (1, '核心')], max_length=32, null=True, verbose_name='机房类型')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': 'IDC机房',
                'verbose_name_plural': 'IDC机房',
            },
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7416dfa8-f49b-11e9-86c8-24f6770d0683'), max_length=64, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='产品线')),
                ('slug', models.CharField(blank=True, max_length=100, null=True, verbose_name='别名')),
                ('sort', models.IntegerField(blank=True, default=0, max_length=100, null=True, verbose_name='排序')),
            ],
            options={
                'verbose_name': '产品线',
                'verbose_name_plural': '产品线',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7416dfa9-f49b-11e9-a7d1-24f6770d0683'), max_length=64, unique=True)),
                ('service_name', models.CharField(blank=True, max_length=60, null=True, verbose_name='项目名')),
                ('aliases_name', models.CharField(blank=True, max_length=60, null=True, verbose_name='别名，用于监控')),
                ('description', models.TextField(blank=True, null=True, verbose_name='业务说明')),
                ('project_doc', models.TextField(blank=True, null=True, verbose_name='业务维护说明')),
                ('project_user_group', models.TextField(blank=True, help_text='只有项目组成员才能申请发布', null=True, verbose_name='组成员')),
                ('sort', models.IntegerField(blank=True, default=0, max_length=100, null=True, verbose_name='排序')),
                ('line', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business', to='assets.Line', verbose_name='产品线')),
                ('project_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_business', to=settings.AUTH_USER_MODEL, verbose_name='主要负责人')),
                ('project_contact_backup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_business', to=settings.AUTH_USER_MODEL, verbose_name='第二负责人')),
            ],
            options={
                'verbose_name': '业务',
                'verbose_name_plural': '业务',
            },
        ),
        migrations.CreateModel(
            name='PublishingSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('74172d9a-f49b-11e9-a170-24f6770d0683'), max_length=64, unique=True)),
                ('project_name', models.IntegerField(max_length=20, verbose_name='项目名称')),
                ('push_url', models.CharField(blank=True, max_length=100, null=True, verbose_name='发布按钮名称')),
            ],
            options={
                'verbose_name': '发布系统',
                'verbose_name_plural': '发布系统',
                'db_table': 'push_system',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('74172d9c-f49b-11e9-a0cc-24f6770d0683'), max_length=64, unique=True)),
                ('name', models.CharField(help_text='注意，所有服务操作全部期于linux服务操作，如: "service iptables restart"', max_length=30, unique=True, verbose_name='服务名称')),
                ('port', models.IntegerField(blank=True, null=True, verbose_name='端口')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '服务',
                'verbose_name_plural': '服务',
            },
        ),
        migrations.CreateModel(
            name='ZabbixRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7419280a-f49b-11e9-b284-24f6770d0683'), max_length=64, unique=True)),
                ('name', models.CharField(max_length=30, null=True)),
                ('type', models.CharField(max_length=30, null=True)),
                ('status', models.IntegerField(blank=True, choices=[(0, '添加失败'), (1, '添加成功'), (2, '添加失败,已存在')], null=True)),
                ('info', models.TextField(blank=True, null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('74172d9b-f49b-11e9-85c0-24f6770d0683'), max_length=64, unique=True)),
                ('data_created', models.DateTimeField(auto_now_add=True)),
                ('env', models.CharField(blank=True, max_length=100, null=True, verbose_name='项目环境')),
                ('project', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='assets.Project')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='all_business', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '业务管理人员',
                'verbose_name_plural': '业务管理人员',
            },
        ),
        migrations.CreateModel(
            name='project_swan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('74190114-f49b-11e9-a62c-24f6770d0683'), max_length=64, unique=True)),
                ('swan_name', models.CharField(help_text='发布时同一项目有多个按布按钮，此处设置为发布选项名称', max_length=100, verbose_name='发布名称')),
                ('code_name', models.CharField(default='', help_text='发布时同一项目有多个按布按钮，此处设置为发布选项名称', max_length=100, verbose_name='仓库名称')),
                ('choose', models.CharField(choices=[(0, '普通'), (1, '基础服务'), (2, 'git仓库发布'), (3, 'java发布'), (4, 'shell发布')], max_length=10, verbose_name='选择')),
                ('check_port_status', models.BooleanField(default=0, verbose_name='是否检测端口')),
                ('check_port', models.CharField(blank=True, help_text='业务启动端口检测,多个端口用逗号分割', max_length=30, null=True, verbose_name='检测业务端口')),
                ('bat_push', models.IntegerField(default=0, help_text='是否批量推送或单台进行发布', verbose_name='批量推送')),
                ('tgt', models.TextField(blank=True, help_text='可以有多个分支或参数，多个参数换行填写即可', null=True, verbose_name='选择发布分支或参数')),
                ('argall_str', models.CharField(blank=True, choices=[(0, 'all'), (1, 'Single')], max_length=20, null=True, verbose_name='发布参数')),
                ('tomcat_init', models.CharField(blank=True, help_text='默认为/etc/init.d/tomcat如多个项目可能有多个名称,请根据名称进行填写', max_length=128, null=True, verbose_name='tomcat起动脚本')),
                ('cache', models.TextField(blank=True, help_text='tomcat启动前需要清除的目录', null=True, verbose_name='缓存目录')),
                ('git_code_user', models.CharField(blank=True, help_text='代码权限所属用户,比如php代码为nginx用户组', max_length=12, null=True, verbose_name='所属用户')),
                ('code_path', models.CharField(blank=True, help_text='当中转仓库更新完代码,需要通知目标服务器pull代码', max_length=128, null=True, verbose_name='本地代码存放目录')),
                ('git_user', models.CharField(blank=True, help_text='如未填写则使使用默认帐号密码,创建后不可修改', max_length=12, null=True, verbose_name='仓库帐号')),
                ('git_pass', models.CharField(blank=True, help_text='如未填写则使使用默认帐号密码,创建后不可修改', max_length=64, null=True, verbose_name='仓库密码')),
                ('shell', models.CharField(blank=True, help_text='发布后执行脚本', max_length=128, null=True, verbose_name='shell脚本')),
                ('shell_status', models.BooleanField(default=False, help_text='指定发布前或发布后执行脚本', verbose_name='发布前/后执行脚本')),
                ('CheckUrl', models.URLField(blank=True, help_text='在发布时,如业务不能单台发布则需要填写此URL,发布时检测业务是否正常在加入调度', null=True, verbose_name='检测URL')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('git_code', models.ForeignKey(blank=True, default='', help_text='如未填写,则默认以服务器目录git仓库为准,接取代码会直接pull不会有其它操作', null=True, on_delete=django.db.models.deletion.CASCADE, to='assets.gitCode', verbose_name='发布仓库')),
                ('node', models.ManyToManyField(blank=True, null=True, to='assets.Host', verbose_name='主机')),
                ('project_name', models.ForeignKey(blank=True, help_text='一个项目可以添加多个发布功能', null=True, on_delete=django.db.models.deletion.CASCADE, to='assets.Project', verbose_name='项目名')),
                ('push_user', models.ManyToManyField(blank=True, null=True, to=settings.AUTH_USER_MODEL, verbose_name='发布权限')),
            ],
            options={
                'verbose_name': '项目发布',
                'verbose_name_plural': '项目发布',
                'db_table': 'project_swan',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IpList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('74194efa-f49b-11e9-8c3b-24f6770d0683'), max_length=64, unique=True)),
                ('network', models.CharField(max_length=32, null=True)),
                ('ip', models.CharField(max_length=16, null=True)),
                ('status', models.IntegerField(null=True)),
                ('idc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.IDC', verbose_name='IDC')),
            ],
        ),
        migrations.CreateModel(
            name='HostRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(auto_created=True, default=uuid.UUID('7418db22-f49b-11e9-bcb7-24f6770d0683'), max_length=64, unique=True)),
                ('user', models.CharField(max_length=30, null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.Host')),
            ],
        ),
        migrations.AddField(
            model_name='host',
            name='business',
            field=models.ManyToManyField(blank=True, null=True, to='assets.Project', verbose_name='所属业务'),
        ),
        migrations.AddField(
            model_name='host',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.IDC', verbose_name='机房'),
        ),
        migrations.AddField(
            model_name='host',
            name='service',
            field=models.ManyToManyField(blank=True, null=True, to='assets.Service', verbose_name='运行服务'),
        ),
        migrations.AddField(
            model_name='host',
            name='vm',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assets.Host', verbose_name='虚拟机父主机'),
        ),
    ]
